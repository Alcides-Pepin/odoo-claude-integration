"""
AI module.

Contains functions for generating AI-powered summaries using Claude API.
"""

import anthropic
from typing import Dict
from config import ANTHROPIC_API_KEY
from services.formatters import strip_html_tags


def generate_top5_ai_summary(client_data: Dict, start_date: str, end_date: str) -> str:
    """
    Generate AI narrative summary of actions taken for a Top 5 client.

    Args:
        client_data: Dict with client info (id, name, messages, activities)
        start_date: Start date in ISO format
        end_date: End date in ISO format

    Returns:
        Narrative summary text generated by Claude AI
    """
    try:
        if not client_data:
            return "Aucun client"

        client_name = client_data['name']
        messages = client_data.get('messages', [])
        activities = client_data.get('activities', [])

        # Construire le contexte à partir des messages et activités
        context = f"Client: {client_name}\n"
        context += f"Période: du {start_date} au {end_date}\n\n"

        # Ajouter les messages du chatter
        if messages:
            context += "Messages et notes du chatter:\n"
            for msg in messages:
                date = msg.get('date', '')[:10]  # YYYY-MM-DD
                body_text = strip_html_tags(msg.get('body', ''))
                message_type = msg.get('message_type', 'note')
                subject = msg.get('subject', '')

                if body_text:
                    context += f"- {date} ({message_type}): {body_text[:200]}\n"
                    if subject:
                        context += f"  Sujet: {subject}\n"

        # Ajouter les activités réalisées
        if activities:
            context += "\nActivités réalisées:\n"
            for act in activities:
                date_done = act.get('date_done', '')
                summary = act.get('summary', 'Activité sans nom')
                note = act.get('note', '')

                context += f"- {date_done}: {summary}\n"
                if note:
                    note_text = strip_html_tags(note)
                    if note_text:
                        context += f"  Note: {note_text[:200]}\n"

        # Si aucune donnée
        if not messages and not activities:
            return "Aucune action enregistrée pour ce client durant la période."

        # Construire le prompt
        prompt = f"""Tu es un assistant commercial qui rédige des rapports d'activité professionnels.

Contexte:
- Client: {client_name}
- Période: du {start_date} au {end_date}

Voici les messages et activités enregistrés pour ce client durant cette période:

{context}

Consigne:
Rédige un récit narratif FLUIDE et PROFESSIONNEL décrivant les actions commerciales menées avec ce client durant la période.

IMPORTANT:
- Rédige en PARAGRAPHES NARRATIFS, PAS de listes à puces
- Évite les formulations génériques ou creuses
- Sois CONCRET et FACTUEL en te basant sur les données fournies
- Si peu d'actions ont été menées, dis-le simplement sans enjoliver
- Ton style doit être celui d'un compte-rendu commercial professionnel
- Ne commence PAS par "Durant cette période" ou formules similaires
- Va DIRECTEMENT au contenu factuel

Exemple de ce que JE VEUX:
"Le commercial a réalisé trois rendez-vous de dégustation avec ce client. Suite à la visite du 15 janvier, une commande de 150 bouteilles a été passée. Un suivi téléphonique le 20 janvier a permis de confirmer la livraison et d'identifier un besoin complémentaire en vins blancs pour mars."

Exemple de ce que JE NE VEUX PAS:
"Durant cette période, plusieurs actions ont été menées:
- Réalisation de rendez-vous
- Passage de commande
- Suivi client"
"""

        # Appeler Claude API
        if not ANTHROPIC_API_KEY:
            return "[Erreur: ANTHROPIC_API_KEY non configurée]"

        client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)

        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=1000,
            temperature=0.7,
            messages=[{
                "role": "user",
                "content": prompt
            }]
        )

        summary = response.content[0].text
        return summary

    except Exception as e:
        return f"[Erreur lors de la génération du résumé: {str(e)}]"


def generate_claude_summary(activities_data, tasks_data, projects_data, user_name, start_date, end_date):
    """
    Generate Claude AI summary for activity report

    Args:
        activities_data: Dict with activities data and details
        tasks_data: Dict with tasks data and details
        projects_data: Dict with projects data and details
        user_name: Name of the user for personalized summary
        start_date: Start date string
        end_date: End date string

    Returns:
        String with Claude-generated summary or error message
    """
    try:
        if not ANTHROPIC_API_KEY:
            return "Résumé IA non disponible (clé API manquante)"

        # Build enriched data summary
        test_data_summary = f"""
Données d'activité de la semaine du {start_date} au {end_date}:

ACTIVITÉS RÉALISÉES ({activities_data.get('activites_realisees', 0)}):"""

        # Add completed activities details with enriched data
        activites_details = activities_data.get('activites_realisees_details', [])
        if activites_details:
            for activity in activites_details:
                activity_type = activity.get('type', 'N/A')
                note = activity.get('note', '')
                test_data_summary += f"\n- {activity.get('name', 'Activité sans nom')} (le {activity.get('date', 'N/A')})"
                if activity_type != 'N/A':
                    test_data_summary += f" [Type: {activity_type}]"
                if note:
                    test_data_summary += f" - {note}"
        else:
            test_data_summary += "\n- Aucune activité réalisée"

        test_data_summary += f"""

TÂCHES RÉALISÉES ({tasks_data.get('taches_realisees', 0)}):"""

        # Add completed tasks details with enriched data
        taches_details = tasks_data.get('taches_realisees_details', [])
        if taches_details:
            for task in taches_details:
                project_name = task.get('project', 'Projet non spécifié')
                client_name = task.get('client', 'N/A')
                description = task.get('description', '')
                test_data_summary += f"\n- {task.get('name', 'Tâche sans nom')}"
                if project_name != 'Projet non spécifié':
                    test_data_summary += f" (Projet: {project_name})"
                if client_name != 'N/A':
                    test_data_summary += f" [Client: {client_name}]"
                if description:
                    test_data_summary += f" - {description}"
        else:
            test_data_summary += "\n- Aucune tâche réalisée"

        test_data_summary += f"""

PROJETS RÉALISÉS ({projects_data.get('projets_realises', 0)}):"""

        # Add completed projects details with enriched data
        projets_details = projects_data.get('projets_realises_details', [])
        if projets_details:
            for project in projets_details:
                client_name = project.get('client', 'N/A')
                description = project.get('description', '')
                test_data_summary += f"\n- {project.get('name', 'Projet sans nom')} (finalisé le {project.get('date', 'N/A')})"
                if client_name != 'N/A':
                    test_data_summary += f" [Client: {client_name}]"
                if description:
                    test_data_summary += f" - {description}"
        else:
            test_data_summary += "\n- Aucun projet réalisé"

        test_data_summary += f"""

STATISTIQUES GÉNÉRALES:
- Activités en retard: {activities_data.get('activites_retard', 0)}
- Tâches en retard: {tasks_data.get('taches_retard', 0)}
- Projets en retard: {projects_data.get('projets_retard', 0)}
        """

        # Create narrative-focused prompt with user name
        prompt = f"""Rédige un compte-rendu narratif des activités de {user_name} cette semaine en adoptant un ton journalistique neutre.

STYLE : Narration factuelle
- Raconte COMMENT les choses se sont passées, pas SI c'est bien ou mal
- Utilise des connecteurs temporels et logiques pour fluidifier le récit ("Cette semaine", "Par la suite", "En parallèle")
- Contextualise les actions (projets, clients, objectifs) de manière neutre
- Verbes d'action descriptifs sans adjectifs évaluatifs

INTERDIT :
- Adjectifs de jugement : ~~clé~~, ~~important~~, ~~significatif~~, ~~très occupé~~
- Interprétations : ~~"suggère que"~~, ~~"montre son engagement"~~, ~~"a dû faire face"~~
- Évaluations d'impact : ~~"contribue à la performance"~~, ~~"renforcera la compétitivité"~~
- Justifications : Ne défends pas les retards, constate-les simplement

FORMAT : 2-3 paragraphes en prose naturelle

EXEMPLE DE TON ATTENDU :
"Cette semaine, {user_name} a terminé 8 tâches sur 3 projets. Il a principalement travaillé sur la refonte de la base de données client, où il a restructuré les tables et implémenté un système d'export automatique. En parallèle, il a participé à deux réunions de suivi avec le client X et mis à jour cinq fiches CRM suite à ces échanges. 4 activités sont actuellement en retard."

Données :{test_data_summary}"""

        # Call Claude API
        client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)

        response = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=1000,
            temperature=0.7,
            messages=[{"role": "user", "content": prompt}]
        )

        # Replace line breaks with HTML <br> tags for proper display
        summary_text = response.content[0].text
        summary_html = summary_text.replace('\n', '<br>')

        return summary_html

    except Exception as e:
        return f"Erreur lors de la génération du résumé IA : {str(e)}"
